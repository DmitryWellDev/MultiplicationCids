[{"D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\index.tsx":"1","D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\reportWebVitals.ts":"2","D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\App.tsx":"3","D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\Components\\Multiple2\\Multiple2.tsx":"4","D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\Components\\CheckingImage\\CheckingImage.tsx":"5"},{"size":517,"mtime":1609755280509,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":236,"mtime":1609756577841,"results":"9","hashOfConfig":"7"},{"size":2149,"mtime":1609756516833,"results":"10","hashOfConfig":"7"},{"size":539,"mtime":1609756042986,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"10j4xp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\index.tsx",[],["25","26"],"D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\reportWebVitals.ts",[],"D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\App.tsx",[],"D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\Components\\Multiple2\\Multiple2.tsx",["27"],"import React, {ChangeEvent, useState} from 'react'\r\nimport styles from './Multiple2.module.css'\r\nimport {CheckingImage} from \"../CheckingImage/CheckingImage\";\r\n\r\n\r\n\r\nexport const Multiple2 = () => {\r\n    let multiplier = 2\r\n    let s: Array<number> = []\r\n    for (let i: number = 1; i < 11; i++) {\r\n        s.push(i)\r\n    }\r\n\r\n    let [multipleResult, setMultipleResult] = useState<boolean | null>(null)\r\n\r\n    let [answersArr, setAnswersArr] = useState<Array<string>>([])\r\n\r\n    let w: Array<string> = []\r\n    w[0] = '0'\r\n\r\n    const getInpValue = (value: string) => {\r\n        if (value !== '1') {\r\n            w.push(value)\r\n        }\r\n        if (w.length == 7) {\r\n            setAnswersArr(w)\r\n            console.log(answersArr)\r\n            console.log('ddddddddd')\r\n        }\r\n        console.log(w);\r\n        /*if(\r\n            // w[0] === '' &&\r\n            // w[1] === '4' &&\r\n            // w[2] === '6' &&\r\n            // w[3] === '8' &&\r\n            // w[4] === '10' &&\r\n            // w[5] === '12' &&\r\n            // w[6] === '14' &&\r\n            // w[7] === '16' &&\r\n            // w[8] === '18' &&\r\n            // w[9] === '20'\r\n            //  w[0] === '4'\r\n        ) {\r\n            alert('you did it!')\r\n        }*/\r\n    }\r\n    return (\r\n        <div className={styles.main}>\r\n            {s.map((el, index) => <div key={index}>{multiplier} * {el} = <input onChange={\r\n                (e: ChangeEvent<HTMLInputElement>) => {\r\n                    if (e.currentTarget.value === `${multiplier * el}` || e.currentTarget.value === '1') {\r\n                        setMultipleResult(multipleResult = true)\r\n                    } else {\r\n                        setMultipleResult(multipleResult = false)\r\n                    }\r\n                    getInpValue(e.currentTarget.value)\r\n                }} className={multipleResult ? `${styles.inputStyle} ${styles.positiveInp}` : `${styles.inputStyle} ${styles.negativeInp}`}\r\n            />\r\n            </div>)}\r\n            {/*----------------------------------------------------------------------------------------------------*/}\r\n            {/*image under the table*/}\r\n            <CheckingImage multipleResult={multipleResult}/>\r\n        </div>\r\n    )\r\n}\r\n","D:\\stady\\js\\React\\multiplicatorCids\\my-app\\src\\Components\\CheckingImage\\CheckingImage.tsx",["28"],"import React from 'react'\r\nimport styles from \"../Multiple2/Multiple2.module.css\";\r\n\r\ntype PropsType = {\r\n    multipleResult: boolean | null\r\n}\r\n\r\nexport const CheckingImage = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <img className={styles.imgStyle} src={props.multipleResult\r\n                ? 'https://i.pinimg.com/originals/01/fb/2c/01fb2cb2cf0855514cf1df69f46acda8.gif'\r\n                : 'https://media1.tenor.com/images/d3fb3b41f9acae3e80bb6269686e68c5/tenor.gif?itemid=11347556'}/>\r\n        </div>\r\n    )\r\n}",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":25,"column":22,"nodeType":"35","messageId":"36","endLine":25,"endColumn":24},{"ruleId":"37","severity":1,"message":"38","line":11,"column":13,"nodeType":"39","endLine":13,"endColumn":114},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]